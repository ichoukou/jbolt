#define s_paginateAdminList(modelName,mainLogicBean)
  /**
	 * 后台管理分页查询#(mainLogicBean!=null)
	 * @param pageNumber
	 * @param pageSize
	 * @param keywords
	 * @return
	 */
	public Page<#(modelName)> paginateAdminList(int pageNumber, int pageSize, String keywords) {
		if(notOk(keywords)) {
			return paginate("#(mainLogicBean.orderColumn?? 'id')","#(mainLogicBean.orderType?? 'desc')",pageNumber, pageSize);
		}
		return paginateByKeywords("#(mainLogicBean.orderColumn?? 'id')","#(mainLogicBean.orderType?? 'desc')", pageNumber, pageSize, keywords, "#(mainLogicBean.matchColumns?? 'name')");
	}
#end

#define s_getAdminList(modelName,mainLogicBean)
  /**
	 * 后台管理list查询
	 * @param keywords
	 * @return
	 */
	public List<#(modelName)> getAdminList(String keywords) {
		if(notOk(keywords)) {
		return getCommonList("#(mainLogicBean.orderColumn?? 'id')","#(mainLogicBean.orderType?? 'desc')");
		}
		return  getCommonListByKeywords(keywords, "#(mainLogicBean.orderColumn?? 'id')","#(mainLogicBean.orderType?? 'desc')", "#(mainLogicBean.matchColumns?? 'name')");
	}
#end


#define s_save(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
  /**
	 * 保存
	 * @param userId
	 * @param #(fctucName)
	 * @return
	 */
	public Ret save(Integer userId, #(modelName) #(fctucName)) {
		return submit(userId, #(fctucName), false);
	}
#end

#define s_update(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
  /**
	 * 保存
	 * @param userId
	 * @param #(fctucName)
	 * @return
	 */
	public Ret update(Integer userId, #(modelName) #(fctucName)) {
		return submit(userId, #(fctucName), true);
	}
#end

#define s_submit(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
#setLocal(dbModelName="db"+modelName)
   /**
	  * 提交
	 * @param userId
	 * @param #(fctucName)
	 * @param update
	 */
	public Ret submit(Integer userId, #(modelName) #(fctucName), boolean update) {
		if(#(fctucName)==null
				||(!update&&isOk(#(fctucName).getId()))
				||(update&&notOk(#(fctucName).getId()))) {
			return fail(Msg.PARAM_ERROR);
		}
		if(update) {
			//更新时需要判断数据存在
			#(modelName) #(dbModelName)=findById(#(fctucName).getId());
			if(#(dbModelName)==null) {return fail(Msg.DATA_NOT_EXIST);}
		}
		boolean success=false;
		//save和update分别处理
		if(update) {
			//if(exists(columnName, value, #(fctucName).getId())) {return fail(Msg.DATA_SAME_NAME_EXIST);}
			success=#(fctucName).update();
		}else {
			//if(exists(columnName, value, -1) {return fail(Msg.DATA_SAME_NAME_EXIST);}
			#(fctucName).setObjectUserId(userId);
			success=#(fctucName).save();
		}
		if(success) {
			//添加日志
			//addSystemLog(#(fctucName).getId(), userId, update?SystemLog.TYPE_UPDATE:SystemLog.TYPE_SAVE, SystemLog.TARGETTYPE_xxx, #(fctucName).getName());
		}
		return ret(success);
	}
#end

#define s_delete(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
   /**
	  * 删除
	 * @param userId
	 * @param id
	 * @return
	 */
	public Ret delete(Integer userId,Integer id) {
		Ret ret=deleteById(id,false);
		if(ret.isOk()){
			//添加日志
			//#(modelName) #(fctucName)=ret.getAs("data");
			//addDeleteSystemLog(id, userId, SystemLog.TARGETTYPE_xxx, #(fctucName).getName());
		}
		return ret;
	}

	/**@Override
	public String checkInUse(#(modelName) #(fctucName)) {
		//这里用来覆盖 检测#(modelName)是否被其它表引用
		return null;
	}*/
#end

#define s_move(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
/**
	  * 上移
	 * @param userId
	 * @param id
	 * @return
	 */
	public Ret doMove(Integer userId,Integer id,Integer otherId) {
	//TODO 未完整实现 有待底层实现
		//#(modelName) #(fctucName)=findById(id);
		//if(#(fctucName)==null){
		//	return fail("数据不存在或已被删除");
		//}
		//Integer rank=#(fctucName).getSortRank();
		//if(rank==null||rank<=0){
		//	return fail("顺序需要初始化");
		//}
		return SUCCESS;
	}
#end

#define s_up(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
   /**
	  * 上移
	 * @param userId
	 * @param id
	 * @return
	 */
	public Ret doUp(Integer userId,Integer id) {
		#(modelName) #(fctucName)=findById(id);
		if(#(fctucName)==null){
			return fail("数据不存在或已被删除");
		}
		Integer rank=#(fctucName).getSortRank();
		if(rank==null||rank<=0){
			return fail("顺序需要初始化");
		}
		if(rank==1){
			return fail("已经是第一个");
		}
		#(modelName) up#(modelName)=findFirst(Kv.by("sort_rank", rank-1));
		if(up#(modelName)==null){
			return fail("顺序需要初始化");
		}
		up#(modelName).setSortRank(rank);
		#(fctucName).setSortRank(rank-1);
		
		up#(modelName).update();
		#(fctucName).update();
		return SUCCESS;
	}
#end

#define s_down(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
/**
	 * 下移
	 * @param userId
	 * @param id
	 * @return
	 */
	public Ret doDown(Integer userId,Integer id) {
		#(modelName) #(fctucName)=findById(id);
		if(#(fctucName)==null){
			return fail("数据不存在或已被删除");
		}
		Integer rank=#(fctucName).getSortRank();
		if(rank==null||rank<=0){
			return fail("顺序需要初始化");
		}
		int max=getCount();
		if(rank==max){
			return fail("已经是最后已一个");
		}
		#(modelName) up#(modelName)=findFirst(Kv.by("sort_rank", rank+1));
		if(up#(modelName)==null){
			return fail("顺序需要初始化");
		}
		up#(modelName).setSortRank(rank);
		#(fctucName).setSortRank(rank+1);
		
		up#(modelName).update();
		#(fctucName).update();
		return SUCCESS;
	}
#end


#define s_initRank(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
   /**
	  * 初始化排序
	 */
	public Ret doInitRank(Integer userId){
		List<#(modelName)> allList=findAll();
		if(allList.size()>0){
			for(int i=0;i<allList.size();i++){
				allList.get(i).setSortRank(i+1);
				allList.get(i).deleteIdCache();
			}
			Db.batchUpdate(allList, allList.size());
		}
		//添加日志
		//addUpdateSystemLog(null, userId, SystemLog.TARGETTYPE_XXXX, "所有数据", "的顺序:初始化所有");
		return SUCCESS;
	}
#end

#define s_toggleEnable(modelName)
#setLocal(fctucName=firstCharToLowerCase(modelName))
   /**
	  * 切换禁用启用状态
	 * @param userId
	 * @param id
	 * @return
	 */
	public Ret toggleEnable(Integer userId, Integer id) {
		//说明:如果需要日志处理 就解开下面部分内容 如果不需要直接删掉即可
		Ret ret=toggleBoolean(id, "enable");
		if(ret.isOk()){
			//添加日志
			//#(modelName) #(fctucName)=ret.getAs("data");
			//addUpdateSystemLog(id, userId, SystemLog.TARGETTYPE_xxx, #(fctucName).getName(),"的启用状态:"+#(fctucName).getEnable());
		} 
		return ret;
	}
#end


#define s_genToggleMethod(name,modelName,mainLogicBean)
  /**
	* 切换#(method.jboltField.name)属性
	*/
	public Ret #(method.name)(Integer userId, Integer id) {
		Ret ret=toggleBoolean(id, "#(method.jboltField.columnName)");
		if(ret.isOk()){
			//TODO 添加日志
			//#(modelName) #(method.jboltField.name)=ret.getAs("data");
			//addUpdateSystemLog(id, userId, SystemLog.TARGETTYPE_xxx,  #(method.jboltField.name).getName(),"的属性状态:"+ #(method.jboltField.name).getEnable());
		} 
		return ret;
	}
#end

#define s_genOtherMethod(method,modelName,mainLogicBean)
#if(method.name.indexOf("toggle")!=-1)
#@s_genToggleMethod(method,modelName,mainLogicBean)
#else
	public Ret #(method.name)(){
		//TODO 请实现业务逻辑代码	
		return SUCCESS;
	}
#end
#end
#define genServiceMethod(method,modelName,mainLogicBean)
	#switch(method.name)
		#case("paginateAdminList")
			#@s_paginateAdminList(modelName,mainLogicBean)
		#case("getAdminList")
			#@s_getAdminList(modelName,mainLogicBean)
		#case("save")
			#@s_save(modelName)
		#case("update")
			#@s_update(modelName)	
		#case("delete")
			#@s_delete(modelName)	
		#case("submit")
			#@s_submit(modelName)	
		#case("toggleEnable")
			#@s_toggleEnable(modelName)
		#case("up")
			#@s_up(modelName)
		#case("move")
			#@s_move(modelName)
		#case("down")
			#@s_down(modelName)
		#case("initRank")
			#@s_initRank(modelName)
		#default
			#@s_genOtherMethod(method,modelName,mainLogicBean)				
	#end
#end